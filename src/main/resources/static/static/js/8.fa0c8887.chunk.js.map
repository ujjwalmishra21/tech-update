{"version":3,"sources":["components/Signup/Signup.js"],"names":["Signup","state","form","name","type","value","touched","error","valid","placeholder","validation","required","minLength","onSubmit","formIsValid","localeCompare","data","field","props","submitSignup","alert","onChange","event","inputField","updatedFormElement","updateObject","target","checkValidity","updatedForm","setState","formElementArr","key","this","push","id","properties","className","map","element","label","variant","helperText","disabled","loading","onClick","color","Fragment","Component","connect","dispatch","actions"],"mappings":"0QASMA,E,4MACFC,MAAQ,CACJC,KAAM,CAEE,SAAW,CACPC,KAAK,WACLC,KAAK,OACLC,MAAM,GACNC,SAAQ,EACRC,MAAM,KACNC,OAAM,EACNC,YAAY,iBACZC,WAAW,CACPC,UAAU,IAGlB,SAAW,CACPR,KAAK,WACLC,KAAK,WACLC,MAAM,GACNC,SAAS,EACTE,OAAM,EACND,MAAM,KACNE,YAAY,iBACZC,WAAW,CACPC,UAAU,EACVC,UAAU,IAGlB,gBAAkB,CACdT,KAAK,kBACLC,KAAK,WACLC,MAAM,GACNC,SAAS,EACTE,OAAO,EACPD,MAAM,KACNE,YAAa,oBACbC,WAAW,CACPC,UAAU,EACVC,UAAU,M,EAO9BC,SAAW,WACP,GAAG,EAAKZ,MAAMa,YACV,GAAG,EAAKb,MAAMa,YACV,GAAiG,IAA9F,EAAKb,MAAMC,KAAX,gBAAmCG,MAAMU,cAAc,EAAKd,MAAMC,KAAX,SAA4BG,OAAa,CAC/F,IAAIW,EAAO,GACX,IAAI,IAAIC,KAAS,EAAKhB,MAAMC,KACxBc,EAAKC,GAAS,EAAKhB,MAAMC,KAAKe,GAAOZ,MAEzCW,EAAI,QAAc,CAAC,GACnB,EAAKE,MAAMC,aAAaH,QAExBI,MAAM,+BAIVA,MAAM,sCAGVA,MAAM,wB,EAKdC,SAAW,SAACC,EAAOC,GAEf,IAAMC,EAAqBC,YAAa,EAAKxB,MAAMC,KAAKqB,GAAY,CAChElB,MAAOiB,EAAMI,OAAOrB,MACpBG,MAAOmB,YAAcL,EAAMI,OAAOrB,MAAO,EAAKJ,MAAMC,KAAKqB,GAAYb,YACrEJ,SAAS,IAGPsB,EAAcH,YAAa,EAAKxB,MAAMC,KAAZ,eAC3BqB,EAAaC,IAGdV,GAAc,EAElB,IAAI,IAAIS,KAAcK,EAClBd,EAAcc,EAAYL,GAAYjB,SAAWsB,EAAYL,GAAYf,OAASM,EAGtF,EAAKe,SAAS,CACV3B,KAAM0B,EACNd,YAAaA,K,uDAQZ,IAAD,OAGAgB,EAAiB,GAErB,IAAI,IAAIC,KAAOC,KAAK/B,MAAMC,KACtB4B,EAAeG,KAAK,CAChBC,GAAIH,EACJI,WAAaH,KAAK/B,MAAMC,KAAK6B,KAKrC,IAAI7B,EACA,0BAAMkC,UAAU,eACXN,EAAeO,KAAI,SAAAC,GACjB,OACC,yBAAKP,IAAKO,EAAQJ,IACf,kBAAC,IAAD,CACKK,MAAOD,EAAQH,WAAWhC,KAC1BqC,QAAQ,WACRjC,MAAO+B,EAAQH,WAAW7B,SAAWgC,EAAQH,WAAW3B,MACxDiC,WAAYH,EAAQH,WAAW5B,MAC/BF,MAAOiC,EAAQH,WAAW9B,MAC1BgB,SAAU,SAACC,GAAD,OAAS,EAAKD,SAASC,EAAMgB,EAAQH,WAAWhC,OAC1DM,YAAa6B,EAAQH,WAAW1B,YAChC2B,UAAU,eAAe,iCAMrC,kBAAC,IAAD,CAAQM,SAAUV,KAAKd,MAAMyB,QAASC,QAASZ,KAAKnB,SAAU2B,QAAQ,YAAYK,MAAM,WAAxF,YAKR,OACI,kBAAC,IAAMC,SAAP,KACK5C,O,GAxII6C,aAoJNC,sBAAQ,MANI,SAAAC,GACvB,MAAO,CACH9B,aAAc,SAACH,GAAD,OAAUiC,EAASC,IAAelC,QAIzCgC,CAAkChD","file":"static/js/8.fa0c8887.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport './Signup.css';\r\nimport { checkValidity, updateObject } from '../../utility/utility';\r\nimport { Button, TextField } from '@material-ui/core';\r\n\r\nclass Signup extends Component{\r\n    state = {\r\n        form: {\r\n            \r\n                'username':{\r\n                    name:'username',\r\n                    type:'text',\r\n                    value:'',\r\n                    touched:false,\r\n                    error:null,\r\n                    valid:true,\r\n                    placeholder:'Enter username',\r\n                    validation:{\r\n                        required: true\r\n                    }\r\n                },\r\n                'password':{\r\n                    name:'password',\r\n                    type:'password',\r\n                    value:'',\r\n                    touched: false,\r\n                    valid:true,\r\n                    error:null,\r\n                    placeholder:'Enter password',\r\n                    validation:{\r\n                        required: true,\r\n                        minLength:8\r\n                    }\r\n                },\r\n                'confirmPassword':{\r\n                    name:'confirmPassword',\r\n                    type:'password',\r\n                    value:'',\r\n                    touched: false,\r\n                    valid: true,\r\n                    error:null,\r\n                    placeholder: 'Re-enter password',\r\n                    validation:{\r\n                        required: true,\r\n                        minLength:8\r\n                    }\r\n                }\r\n        },\r\n    \r\n        \r\n    }\r\n    onSubmit = () => {\r\n        if(this.state.formIsValid){\r\n            if(this.state.formIsValid){\r\n                if(this.state.form['confirmPassword'].value.localeCompare(this.state.form['password'].value) === 0){\r\n                    let data = {};\r\n                    for(let field in this.state.form){\r\n                        data[field] = this.state.form[field].value;\r\n                    }\r\n                    data['roleIds'] = [2];\r\n                    this.props.submitSignup(data);\r\n                }else{\r\n                    alert('Passwords do not match');\r\n                }\r\n                \r\n            }else{\r\n                alert('Fill all the fields correctly')\r\n            }\r\n        }else{\r\n            alert('Fill all the fields')\r\n        }\r\n        \r\n    }\r\n\r\n    onChange = (event, inputField) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.form[inputField],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.form[inputField].validation),\r\n            touched: true\r\n        });\r\n     \r\n        const updatedForm = updateObject(this.state.form,{\r\n            [inputField]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n\r\n        for(let inputField in updatedForm){\r\n            formIsValid = updatedForm[inputField].touched && updatedForm[inputField].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            form: updatedForm,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n    render(){\r\n\r\n\r\n        let formElementArr = [];\r\n\r\n        for(let key in this.state.form){\r\n            formElementArr.push({\r\n                id: key,\r\n                properties : this.state.form[key]\r\n            });\r\n        }\r\n\r\n\r\n        let form = (\r\n            <form className=\"signup-form\">\r\n                {formElementArr.map(element => {\r\n                   return(\r\n                    <div key={element.id}>\r\n                       <TextField \r\n                            label={element.properties.name} \r\n                            variant=\"outlined\"\r\n                            error={element.properties.touched & !element.properties.valid } \r\n                            helperText={element.properties.error} \r\n                            value={element.properties.value} \r\n                            onChange={(event)=>this.onChange(event,element.properties.name)}\r\n                            placeholder={element.properties.placeholder}\r\n                            className='text-field' /><br/>                            \r\n                    </div>\r\n                   );\r\n                })\r\n\r\n                }\r\n                <Button disabled={this.props.loading} onClick={this.onSubmit} variant='contained' color='primary'>Sign Up</Button>\r\n                \r\n            </form>\r\n        );\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {form}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        submitSignup: (data) => dispatch(actions.signup(data))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Signup);\r\n"],"sourceRoot":""}