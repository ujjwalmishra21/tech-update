{"version":3,"sources":["components/Login/Login.js"],"names":["Login","state","form","name","type","value","touched","error","valid","placeholder","validation","required","minLength","onSubmit","formIsValid","data","field","props","submitLogin","alert","onChange","event","inputField","updatedFormElement","updateObject","target","checkValidity","updatedForm","setState","this","initializeAuth","formElementArr","key","push","id","properties","className","map","element","label","variant","helperText","disabled","loading","onClick","color","message","status","severity","redirect","isAuthenticated","to","Fragment","Component","connect","auth","token","dispatch","actions"],"mappings":"0RAWMA,E,4MACFC,MAAQ,CACJC,KAAM,CAEE,SAAW,CACPC,KAAK,WACLC,KAAK,OACLC,MAAM,GACNC,SAAQ,EACRC,MAAM,KACNC,OAAM,EACNC,YAAY,iBACZC,WAAW,CACPC,UAAU,IAGlB,SAAW,CACPR,KAAK,WACLC,KAAK,WACLC,MAAM,GACNC,SAAS,EACTE,OAAM,EACND,MAAM,KACNE,YAAY,iBACZC,WAAW,CACPC,UAAU,EACVC,UAAU,M,EAK9BC,SAAW,WACP,GAAG,EAAKZ,MAAMa,YAAY,CACtB,IAAIC,EAAO,GACX,IAAI,IAAIC,KAAS,EAAKf,MAAMC,KACxBa,EAAKC,GAAS,EAAKf,MAAMC,KAAKc,GAAOX,MAEzC,EAAKY,MAAMC,YAAYH,QAEvBI,MAAM,kC,EASdC,SAAW,SAACC,EAAOC,GAEf,IAAMC,EAAqBC,YAAa,EAAKvB,MAAMC,KAAKoB,GAAY,CAChEjB,MAAOgB,EAAMI,OAAOpB,MACpBG,MAAOkB,YAAcL,EAAMI,OAAOpB,MAAO,EAAKJ,MAAMC,KAAKoB,GAAYZ,YACrEJ,SAAS,IAGPqB,EAAcH,YAAa,EAAKvB,MAAMC,KAAZ,eAC3BoB,EAAaC,IAGdT,GAAc,EAClB,IAAI,IAAIQ,KAAcK,EAClBb,EAAca,EAAYL,GAAYhB,SAAWqB,EAAYL,GAAYd,OAASM,EAGtF,EAAKc,SAAS,CACV1B,KAAMyB,EACNb,YAAaA,K,qEAtBjBe,KAAKZ,MAAMa,mB,+BA0BN,IAAD,OACAC,EAAiB,GAErB,IAAI,IAAIC,KAAOH,KAAK5B,MAAMC,KACtB6B,EAAeE,KAAK,CAChBC,GAAIF,EACJG,WAAaN,KAAK5B,MAAMC,KAAK8B,KAIrC,IAAI9B,EACA,0BAAMkC,UAAU,cACXL,EAAeM,KAAI,SAAAC,GACjB,OACC,yBAAMN,IAAKM,EAAQJ,IAChB,kBAAC,IAAD,CACKK,MAAOD,EAAQH,WAAWhC,KAC1BqC,QAAQ,WACRjC,MAAO+B,EAAQH,WAAW7B,SAAWgC,EAAQH,WAAW3B,MACxDiC,WAAYH,EAAQH,WAAW5B,MAC/BF,MAAOiC,EAAQH,WAAW9B,MAC1Be,SAAU,SAACC,GAAD,OAAS,EAAKD,SAASC,EAAMiB,EAAQH,WAAWhC,OAC1DC,KAAMkC,EAAQH,WAAW/B,KACzBK,YAAa6B,EAAQH,WAAW1B,YAChC2B,UAAU,eAAe,iCAMrC,kBAAC,IAAD,CAAQM,SAAUb,KAAKZ,MAAM0B,QAASC,QAASf,KAAKhB,SAAU2B,QAAQ,YAAYK,MAAM,WAAxF,WAKJC,EAAU,GACW,IAAtBjB,KAAKZ,MAAM8B,QAAgBlB,KAAKZ,MAAM6B,UACrCA,EAAY,yBAAKV,UAAU,aAAY,kBAAC,IAAD,CAAOY,SAAS,SAASnB,KAAKZ,MAAM6B,WAG/E,IAAIG,EAAW,KAKf,OAHGpB,KAAKZ,MAAMiC,kBACVD,EAAW,kBAAC,IAAD,CAAUE,GAAG,OAGxB,kBAAC,IAAMC,SAAP,KACKH,EACA/C,EACA4C,O,GAxHGO,aA+ILC,uBAjBS,SAAArD,GACpB,MAAO,CACH0C,QAAS1C,EAAMsD,KAAKZ,QACpBpC,MAAON,EAAMsD,KAAKhD,MAClB2C,gBAAsC,OAArBjD,EAAMsD,KAAKC,MAC5BV,QAAS7C,EAAMsD,KAAKT,QACpBC,OAAQ9C,EAAMsD,KAAKR,WAIA,SAAAU,GACvB,MAAO,CACHvC,YAAa,SAACH,GAAD,OAAU0C,EAASC,IAAiB3C,KACjDe,eAAgB,kBAAM2B,EAASC,WAIxBJ,CAA6CtD","file":"static/js/7.1c39d44a.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport './Login.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../utility/utility';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nclass Login extends Component{\r\n    state = {\r\n        form: {\r\n            \r\n                'username':{\r\n                    name:'username',\r\n                    type:'text',\r\n                    value:'',\r\n                    touched:false,\r\n                    error:null,\r\n                    valid:true,\r\n                    placeholder:'Enter username',\r\n                    validation:{\r\n                        required: true\r\n                    }\r\n                },\r\n                'password':{\r\n                    name:'password',\r\n                    type:'password',\r\n                    value:'',\r\n                    touched: false,\r\n                    valid:true,\r\n                    error:null,\r\n                    placeholder:'Enter password',\r\n                    validation:{\r\n                        required: true,\r\n                        minLength:8\r\n                    }\r\n                }\r\n        }        \r\n    }\r\n    onSubmit = () => {\r\n        if(this.state.formIsValid){\r\n            let data = {};\r\n            for(let field in this.state.form){\r\n                data[field] = this.state.form[field].value;\r\n            }\r\n            this.props.submitLogin(data);\r\n        }else{\r\n            alert('Fill all the fields correctly');\r\n        }\r\n        \r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.initializeAuth();\r\n    }\r\n\r\n    onChange = (event, inputField) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.form[inputField],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.form[inputField].validation),\r\n            touched: true\r\n        });\r\n     \r\n        const updatedForm = updateObject(this.state.form,{\r\n            [inputField]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for(let inputField in updatedForm){\r\n            formIsValid = updatedForm[inputField].touched && updatedForm[inputField].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            form: updatedForm,\r\n            formIsValid: formIsValid\r\n        });\r\n    }\r\n        \r\n    render(){\r\n        let formElementArr = [];\r\n\r\n        for(let key in this.state.form){\r\n            formElementArr.push({\r\n                id: key,\r\n                properties : this.state.form[key]\r\n            });\r\n        }\r\n      \r\n        let form = (\r\n            <form className=\"login-form\">\r\n                {formElementArr.map(element => {\r\n                   return(\r\n                    <div  key={element.id}>\r\n                       <TextField \r\n                            label={element.properties.name} \r\n                            variant=\"outlined\"\r\n                            error={element.properties.touched & !element.properties.valid } \r\n                            helperText={element.properties.error} \r\n                            value={element.properties.value} \r\n                            onChange={(event)=>this.onChange(event,element.properties.name)}\r\n                            type={element.properties.type}\r\n                            placeholder={element.properties.placeholder}\r\n                            className='text-field' /><br/>                            \r\n                    </div>\r\n                   );\r\n                })\r\n\r\n                }\r\n                <Button disabled={this.props.loading} onClick={this.onSubmit} variant='contained' color='primary'>LOG IN</Button>\r\n                \r\n            </form>\r\n        );\r\n        \r\n        let message = \"\";\r\n        if(this.props.status === 0 && this.props.message){\r\n            message = ( <div className='alert-div'><Alert severity=\"error\">{this.props.message}</Alert></div>);\r\n        }\r\n\r\n        let redirect = null;\r\n        \r\n        if(this.props.isAuthenticated){\r\n            redirect = <Redirect to=\"/\" />\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {redirect}\r\n                {form}\r\n                {message}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        message: state.auth.message,\r\n        status: state.auth.status\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        submitLogin: (data) => dispatch(actions.authInit(data)),\r\n        initializeAuth: () => dispatch(actions.initializeVariables())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"],"sourceRoot":""}